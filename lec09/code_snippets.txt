// Div element to hold the map.
<div id='map'></div>

// 1. create the map object and the base layer.
            
var map = L.map('map').setView([37.8, -96], 5); //latlong coordinates centered over US
            
L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png').addTo(map);

//add styling to the map
html { height:100%;}
          
body {height:100%;padding: 0;
  margin: 0;
}
          
#map {
width: 100%;
 height: 100%;
}

// 3. add states file to the map
//3.4 Add the states GeoJSON layer to the map
geojson = L.geoJson.ajax("assets/us-states.geojson").addTo(map);
console.log(geojson);

// 2. Create the chorepleth map with interactive functions.
          
// determine the number of classes and their respective break values.
          
// the class breaks are listed below, there will be eight classes
          
//starting with a class 1-10, and ending with a class 1000+
            
var grades = [0, 10, 20, 50, 100, 200, 500, 1000];

          
// now determine the color ramp. The number of colors is determined by the number of classes.
      
// try different interpolation method lch, lab, hsl
          
// for example
          
//  var colors = chroma.scale(['yellow', 'navy']).mode('hsl').colors(grades.length);
          
// or
           
var colors = chroma.scale('OrRd').colors(grades.length);
          
// you can change the forward slashes to see the difference in these two lines
          
// notice how i've subbed in the color palette name 'OrRd' from color brewer in the line above
          
//this provides a sequential color palette from orange to red


          
// get the color based on the class of the input value
            
function getColor(d) {
                
for (var i = 0; i < grades.length - 1; i++) {
                    
if ( d > grades[i] && d < grades[i+1] ) return colors[i];
                
}
                
if (d > grades[grades.length - 1]) return colors[grades.length];
            
}


//determine the style class based on the input feature
//note, we are still working in section 2 here
function style(feature) {
                
return {
                    
weight: 2,
                    
opacity: 1,
                    
color: 'grey',
                    
dashArray: '3',
                    
fillOpacity: 0.7,
                    
fillColor: getColor(feature.properties.density)
                
};
            
}


//now you must edit the following section of code if you want to implement the styling for that feature
geojson = L.geoJson.ajax("assets/us-states.geojson", {
style: style
}).addTo(map);

//you should see a shaded choropleth map at this stage


//now let's add interaction in the appropriate spot
// 3.2.1 highlight a feature when the mouse hovers on it.
            
function highlightFeature(e) {
                
// e indicates the current event, we could call it anything
                
var layer = e.target;
                
//the target captures the object that the event associates with
                
layer.setStyle({
                    
weight: 8,
                    
opacity: 0.8,
                    
color: '#e3e3e3',
                    
fillColor: '#1c5ee3',
                    
fillOpacity: 0.5
                
});
                
// then bring the layer to the front.
                
layer.bringToFront();
                
// select the update class, and update the contet with the input value.
                
// remember whenver we call feature.properties, we're looking in the attributes
                
// for a particular layer - state name and state density, for example
                
info.update(layer.feature.properties);
            
}


//continuing in a new subsequent section
// 3.2.3 reset the hightlighted feature when the mouse is out of its region.
            
function resetHighlight(e) {
                
geojson.resetStyle(e.target);
                
info.update();  //this line will be called later
            
}


// 3.1 declare an empty GeoJSON object
            
var geojson = null;
            
// then we will continue to work on our event listeners


// 3.2.2 zoom to the highlighted feature when the mouse clicks it.
            
function zoomToFeature(e) {
                
map.fitBounds(e.target.getBounds());
            
}

// now use on each feature option to add listeners on our state layers
// 3.3 add these events to the layer object.
            
function onEachFeature(feature, layer) {
                
layer.on({
                    
mouseover: highlightFeature,
                    
click: zoomToFeature,
                    
mouseout: resetHighlight
                
});
            
}

            

// 3.4 assign the geojson data path, style option and onEachFeature option. And then Add the geojson layer to the map.
            
geojson = L.geoJson.ajax("assets/us-states.geojson", {
                
style: style,
                
onEachFeature: onEachFeature
            
}).addTo(map);


//here's the code for our control, add to section 3.1
//paste into the script before section 3.2.1

var info = L.control();

            
info.onAdd = function (map) {
                
this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
                
this.update();
                
return this._div;
            
};

            
// method that we will use to update the control based on feature properties passed
            
info.update = function (props) {
                
this._div.innerHTML = '<h4>US Population Density</h4>' +  (props ?
                    
'<b>' + props.name + '</b><br />' + props.density + ' people / mi<sup>2</sup>'
                    
: 'Hover over a state');
            
};

            

info.addTo(map);


//styling info for the control

.info {
            
z-index: 1000;
            
position: absolute;
            
right: 20px;
            
top: 20px;
            
padding: 6px 8px;
            
font: 14px Arial, Helvetica, sans-serif;
            
text-align: right;
            
background: white;
            
background: rgba(255, 255, 255, 0.8);
            
box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
            
border-radius: 5px;
          
}
        

.info h1 {
            
font-size: 16px;
            
margin: 0 0 5px;
            
color: #777777;
          
}



//create a legend
//add a new div element
<div class='legend'></div>

// 4. create the legend
            
var labels = [];
            
for (var i = 0; i < grades.length - 1; i++) {
                
labels.push('<i style="background:' + colors[i] + '"></i> ' + grades[i] + ' - ' + grades[i + 1]);
            
}

            
labels.push('<i style="background:' + colors[grades.length - 1] + '"></i> ' + grades[grades.length - 1] + ' +');
            
$(".legend").html(labels.join('<br>'));

//styling the legend
.legend {
              
z-index: 1000;
              
position: absolute;
              
right: 20px;
              
bottom: 20px;
              
padding: 6px 8px;
              
font: 14px Arial, Helvetica, sans-serif;
              
background: white;
              
background: rgba(255, 255, 255, 0.8);
              
box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
              
border-radius: 5px;
          
}
   
       
.legend i {
              
width: 18px;
              
height: 16px;
              
float: left;
              
margin-right: 8px;
              
opacity: 0.7;
          
}


// 5. create the credits
            
map.attributionControl.addAttribution('Population data &copy; <a href="http://census.gov/">US Census Bureau</a> | This map is made by ADD YOUR NAME HERE');
